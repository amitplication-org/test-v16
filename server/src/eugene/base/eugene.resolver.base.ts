/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateEugeneArgs } from "./CreateEugeneArgs";
import { UpdateEugeneArgs } from "./UpdateEugeneArgs";
import { DeleteEugeneArgs } from "./DeleteEugeneArgs";
import { EugeneFindManyArgs } from "./EugeneFindManyArgs";
import { EugeneFindUniqueArgs } from "./EugeneFindUniqueArgs";
import { Eugene } from "./Eugene";
import { EugeneService } from "../eugene.service";

@graphql.Resolver(() => Eugene)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class EugeneResolverBase {
  constructor(
    protected readonly service: EugeneService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Eugene",
    action: "read",
    possession: "any",
  })
  async _eugenesMeta(
    @graphql.Args() args: EugeneFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Eugene])
  @nestAccessControl.UseRoles({
    resource: "Eugene",
    action: "read",
    possession: "any",
  })
  async eugenes(@graphql.Args() args: EugeneFindManyArgs): Promise<Eugene[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Eugene, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Eugene",
    action: "read",
    possession: "own",
  })
  async eugene(
    @graphql.Args() args: EugeneFindUniqueArgs
  ): Promise<Eugene | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Eugene)
  @nestAccessControl.UseRoles({
    resource: "Eugene",
    action: "create",
    possession: "any",
  })
  async createEugene(@graphql.Args() args: CreateEugeneArgs): Promise<Eugene> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Eugene)
  @nestAccessControl.UseRoles({
    resource: "Eugene",
    action: "update",
    possession: "any",
  })
  async updateEugene(
    @graphql.Args() args: UpdateEugeneArgs
  ): Promise<Eugene | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Eugene)
  @nestAccessControl.UseRoles({
    resource: "Eugene",
    action: "delete",
    possession: "any",
  })
  async deleteEugene(
    @graphql.Args() args: DeleteEugeneArgs
  ): Promise<Eugene | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
