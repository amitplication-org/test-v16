/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMorArgs } from "./CreateMorArgs";
import { UpdateMorArgs } from "./UpdateMorArgs";
import { DeleteMorArgs } from "./DeleteMorArgs";
import { MorFindManyArgs } from "./MorFindManyArgs";
import { MorFindUniqueArgs } from "./MorFindUniqueArgs";
import { Mor } from "./Mor";
import { MorService } from "../mor.service";

@graphql.Resolver(() => Mor)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class MorResolverBase {
  constructor(
    protected readonly service: MorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Mor",
    action: "read",
    possession: "any",
  })
  async _morsMeta(
    @graphql.Args() args: MorFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Mor])
  @nestAccessControl.UseRoles({
    resource: "Mor",
    action: "read",
    possession: "any",
  })
  async mors(@graphql.Args() args: MorFindManyArgs): Promise<Mor[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Mor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Mor",
    action: "read",
    possession: "own",
  })
  async mor(@graphql.Args() args: MorFindUniqueArgs): Promise<Mor | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mor)
  @nestAccessControl.UseRoles({
    resource: "Mor",
    action: "create",
    possession: "any",
  })
  async createMor(@graphql.Args() args: CreateMorArgs): Promise<Mor> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Mor)
  @nestAccessControl.UseRoles({
    resource: "Mor",
    action: "update",
    possession: "any",
  })
  async updateMor(@graphql.Args() args: UpdateMorArgs): Promise<Mor | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Mor)
  @nestAccessControl.UseRoles({
    resource: "Mor",
    action: "delete",
    possession: "any",
  })
  async deleteMor(@graphql.Args() args: DeleteMorArgs): Promise<Mor | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
