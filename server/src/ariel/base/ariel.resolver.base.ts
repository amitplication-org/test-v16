/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateArielArgs } from "./CreateArielArgs";
import { UpdateArielArgs } from "./UpdateArielArgs";
import { DeleteArielArgs } from "./DeleteArielArgs";
import { ArielFindManyArgs } from "./ArielFindManyArgs";
import { ArielFindUniqueArgs } from "./ArielFindUniqueArgs";
import { Ariel } from "./Ariel";
import { ArielService } from "../ariel.service";

@graphql.Resolver(() => Ariel)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ArielResolverBase {
  constructor(
    protected readonly service: ArielService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ariel",
    action: "read",
    possession: "any",
  })
  async _arielsMeta(
    @graphql.Args() args: ArielFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ariel])
  @nestAccessControl.UseRoles({
    resource: "Ariel",
    action: "read",
    possession: "any",
  })
  async ariels(@graphql.Args() args: ArielFindManyArgs): Promise<Ariel[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ariel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ariel",
    action: "read",
    possession: "own",
  })
  async ariel(
    @graphql.Args() args: ArielFindUniqueArgs
  ): Promise<Ariel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ariel)
  @nestAccessControl.UseRoles({
    resource: "Ariel",
    action: "create",
    possession: "any",
  })
  async createAriel(@graphql.Args() args: CreateArielArgs): Promise<Ariel> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ariel)
  @nestAccessControl.UseRoles({
    resource: "Ariel",
    action: "update",
    possession: "any",
  })
  async updateAriel(
    @graphql.Args() args: UpdateArielArgs
  ): Promise<Ariel | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ariel)
  @nestAccessControl.UseRoles({
    resource: "Ariel",
    action: "delete",
    possession: "any",
  })
  async deleteAriel(
    @graphql.Args() args: DeleteArielArgs
  ): Promise<Ariel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
